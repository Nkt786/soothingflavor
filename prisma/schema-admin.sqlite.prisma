// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  NEW
  ACCEPTED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  DECLINED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum MovementReason {
  PURCHASE
  ADJUSTMENT
  ORDER
  RETURN
  WASTAGE
}

enum MealPlanType {
  WEEKLY
  MONTHLY
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  passwordHash  String?   // For admin credentials
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders       Order[]
  inventoryMovements InventoryMovement[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  categoryId  String
  images      String   // JSON string for SQLite compatibility
  veg         Boolean  @default(true)
  priceMRP    Float    // Using Float instead of Decimal for SQLite
  priceSale   Float?
  calories    Int?
  protein     Int?
  tags        String   // JSON string for SQLite compatibility
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category   @relation(fields: [categoryId], references: [id])
  inventory  Inventory?
  orderItems OrderItem[]
  mealPlanItems MealPlanItem[]

  @@map("products")
}

model Inventory {
  id            String   @id @default(cuid())
  productId     String   @unique
  stockQty      Int      @default(0)
  reorderLevel  Int      @default(10)
  sku           String   @unique
  unit          String   @default("g") // g, ml, pcs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product             Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryMovements  InventoryMovement[]

  @@map("inventory")
}

model InventoryMovement {
  id         String   @id @default(cuid())
  productId  String
  qty        Int      // Positive for stock-in, negative for stock-out
  reason     MovementReason
  refId      String?  // Order ID or other reference
  note       String?
  actorId    String
  createdAt  DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  actor   User    @relation(fields: [actorId], references: [id])

  @@map("inventory_movements")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customerName    String
  customerEmail   String
  phone           String
  address         String
  status          OrderStatus   @default(NEW)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float         // Using Float instead of Decimal
  tax             Float         @default(0)
  shipping        Float         @default(0)
  discount        Float         @default(0)
  total           Float
  notes           String?
  internalNotes   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  qty       Int
  price     Float // Using Float instead of Decimal
  lineTotal Float // Using Float instead of Decimal

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model MealPlan {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  type            MealPlanType
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  items MealPlanItem[]

  @@map("meal_plans")
}

model MealPlanItem {
  id          String   @id @default(cuid())
  mealPlanId  String
  productId   String
  day         Int      // 1-7 for weekly, 1-30 for monthly
  portion     String   // e.g., "200g", "1 piece"
  createdAt   DateTime @default(now())

  // Relations
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("meal_plan_items")
}

model Coupon {
  id        String   @id @default(cuid())
  code      String   @unique
  type      CouponType
  value     Float    // Using Float instead of Decimal
  minOrder  Float    @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String
  entityId  String?
  details   String?  // JSON string for SQLite compatibility
  createdAt DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}
