generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  phone              String?
  emailVerified      DateTime?
  image              String?
  role               Role                @default(USER)
  passwordHash       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  auditLogs          AuditLog[]
  inventoryMovements InventoryMovement[]
  sessions           Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String              @id @default(cuid())
  slug               String              @unique
  name               String
  description        String?
  categoryId         String
  images             String
  veg                Boolean             @default(true)
  priceMRP           Float
  priceSale          Float?
  calories           Int?
  protein            Int?
  tags               String
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  inventory          Inventory?
  inventoryMovements InventoryMovement[]
  orderItems         OrderItem[]
  category           Category            @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Inventory {
  id                 String              @id @default(cuid())
  productId          String              @unique
  stockQty           Int                 @default(0)
  reorderLevel       Int                 @default(10)
  sku                String              @unique
  unit               String              @default("g")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  product            Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryMovements InventoryMovement[]

  @@map("inventory")
}

model InventoryMovement {
  id        String         @id @default(cuid())
  productId String
  qty       Int
  reason    MovementReason
  refId     String?
  note      String?
  actorId   String
  createdAt DateTime       @default(now())
  inventory Inventory      @relation(fields: [productId], references: [productId])
  actor     User           @relation(fields: [actorId], references: [id])
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_movements")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  customerName  String
  customerEmail String
  phone         String
  address       String
  status        OrderStatus   @default(NEW)
  paymentStatus PaymentStatus @default(PENDING)
  subtotal      Float
  tax           Float         @default(0)
  shipping      Float         @default(0)
  discount      Float         @default(0)
  total         Float
  notes         String?
  internalNotes String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String?
  productName  String
  productSlug  String?
  productImage String?
  veg          Boolean?
  qty          Int
  price        Float
  lineTotal    Float
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String
  entityId  String?
  details   String?
  createdAt DateTime @default(now())
  actor     User     @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

enum Role {
  USER
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  NEW
  ACCEPTED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  DECLINED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum MovementReason {
  PURCHASE
  ADJUSTMENT
  ORDER
  RETURN
  WASTAGE
}
