// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // USER, ADMIN, MANAGER, STAFF
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId      String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  categoryId  String?
  priceMRP    Float
  priceSale   Float?
  calories    Int?
  protein     Float?
  veg         Boolean   @default(true)
  isActive    Boolean   @default(true)
  tags        String[]  @default([])
  images      String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])
  inventory Inventory?
  orderItems OrderItem[]

  @@map("products")
}

model Inventory {
  id           String   @id @default(cuid())
  productId    String   @unique
  stockQty     Int      @default(0)
  reorderLevel Int      @default(10)
  sku          String   @unique
  unit         String   @default("g")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerName  String
  customerEmail String?
  phone         String
  address       String      @db.Text
  status        OrderStatus @default(NEW)
  paymentStatus PaymentStatus @default(PENDING)
  subtotal      Float
  discount      Float        @default(0)
  total         Float
  notes         String?     @db.Text
  internalNotes String?      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String?
  productName String
  productSlug String?
  productImage String?
  veg         Boolean?
  qty         Int
  price       Float
  lineTotal   Float
  createdAt   DateTime @default(now())

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  NEW
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
